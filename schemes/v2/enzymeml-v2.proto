/**
 * This file contains Protocol Buffer message definitions.
 *
 * Protocol Buffers (protobuf) is Google's language-neutral, platform-neutral,
 * extensible mechanism for serializing structured data.
 *
 * WARNING: This is an auto-generated file.
 * Do not edit directly - any changes will be overwritten.
 */


syntax = "proto3";

package enzymeml v2;
//
// EnzymeML V2 Enum definitions
//
enum EquationType {
  ASSIGNMENT = 0; // assignment
  INITIAL_ASSIGNMENT = 1; // initialAssignment
  ODE = 2; // ode
  RATE_LAW = 3; // rateLaw
}
enum DataTypes {
  ABSORBANCE = 0; // http://purl.allotrope.org/ontologies/quality#AFQ_0000061
  CONCENTRATION = 1; // http://purl.obolibrary.org/obo/PATO_0000033
  CONVERSION = 2; // http://purl.allotrope.org/ontologies/quality#AFQ_0000226
  FLUORESCENCE = 3; // http://purl.obolibrary.org/obo/PATO_0000018
  PEAK_AREA = 4; // http://purl.allotrope.org/ontologies/result#AFR_0001073
  TRANSMITTANCE = 5; // http://purl.allotrope.org/ontologies/result#AFR_0002261
}
enum UnitType {
  AMPERE = 0; // ampere
  AVOGADRO = 1; // avogadro
  BECQUEREL = 2; // becquerel
  CANDELA = 3; // candela
  CELSIUS = 4; // celsius
  COULOMB = 5; // coulomb
  DIMENSIONLESS = 6; // dimensionless
  FARAD = 7; // farad
  GRAM = 8; // gram
  GRAY = 9; // gray
  HENRY = 10; // henry
  HERTZ = 11; // hertz
  ITEM = 12; // item
  JOULE = 13; // joule
  KATAL = 14; // katal
  KELVIN = 15; // kelvin
  KILOGRAM = 16; // kilogram
  LITRE = 17; // litre
  LUMEN = 18; // lumen
  LUX = 19; // lux
  METRE = 20; // metre
  MOLE = 21; // mole
  NEWTON = 22; // newton
  OHM = 23; // ohm
  PASCAL = 24; // pascal
  RADIAN = 25; // radian
  SECOND = 26; // second
  SIEMENS = 27; // siemens
  SIEVERT = 28; // sievert
  STERADIAN = 29; // steradian
  TESLA = 30; // tesla
  VOLT = 31; // volt
  WATT = 32; // watt
  WEBER = 33; // weber
}


//
// EnzymeML V2 Message definitions
//
// OneOf type definitions for attributes with multiple types
message EnzymeMLDocument {
  // Title of the EnzymeML Document.
  string name = 1;
  // Contains references to publications, databases, and arbitrary links to
  // the web.
  repeated string references = 2;
  // Free-text field for further desctiptions of the experiment and
  // dataset.
  optional string description = 3;
  // Date the EnzymeML document was created.
  optional string created = 4;
  // Date the EnzymeML document was modified.
  optional string modified = 5;
  // Contains all authors that are part of the experiment.
  repeated Creator creators = 6;
  // Contains all vessels that are part of the experiment.
  repeated Vessel vessels = 7;
  // Contains all proteins that are part of the experiment.
  repeated Protein proteins = 8;
  // Contains all complexes that are part of the experiment.
  repeated Complex complexes = 9;
  // Contains all reactants that are part of the experiment.
  repeated SmallMolecule small_molecules = 10;
  // Dictionary mapping from reaction IDs to reaction-describing objects.
  repeated Reaction reactions = 11;
  // Contains measurements that describe outcomes of an experiment.
  repeated Measurement measurements = 12;
  // Contains ordinary differential equations that describe the kinetic
  // model.
  repeated Equation equations = 13;
  // List of parameters that are part of the equation
  repeated Parameter parameters = 14;
}

message Creator {
  // Given name of the author or contributor.
  string given_name = 1;
  // Family name of the author or contributor.
  string family_name = 2;
  // Email address of the author or contributor.
  string mail = 3;
}

message Vessel {
  // Unique identifier of the vessel.
  string id = 1;
  // Name of the used vessel.
  string name = 2;
  // Volumetric value of the vessel.
  double volume = 3;
  // Volumetric unit of the vessel.
  UnitDefinition unit = 4;
  // Whether the volume of the vessel is constant or not.
  boolean constant = 5;
}

message Protein {
  // Unique internal identifier of the protein.
  string id = 1;
  string name = 2;
  boolean constant = 3;
  // Amino acid sequence of the protein
  optional string sequence = 4;
  // Unique identifier of the vessel this protein has been used in.
  optional string vessel_id = 5;
  // EC number of the protein.
  optional string ecnumber = 6;
  // Organism the protein was expressed in.
  optional string organism = 7;
  // Taxonomy identifier of the expression host.
  optional string organism_tax_id = 8;
  // Array of references to publications, database entries, etc. that
  // describe the protein.
  repeated string references = 9;
}

message Complex {
  // Unique identifier of the complex.
  string id = 1;
  string name = 2;
  boolean constant = 3;
  // Unique identifier of the vessel this complex has been used in.
  optional string vessel_id = 4;
  // Array of IDs the complex contains
  repeated string participants = 5;
}

message SmallMolecule {
  // Unique identifier of the small molecule.
  string id = 1;
  string name = 2;
  boolean constant = 3;
  repeated string synonymous_names = 4;
  // Unique identifier of the vessel this small molecule has been used in.
  optional string vessel_id = 5;
  // Canonical Simplified Molecular-Input Line-Entry System (SMILES)
  // encoding of the reactant.
  optional string canonical_smiles = 6;
  // International Chemical Identifier (InChI) encoding of the reactant.
  optional string inchi = 7;
  // Hashed International Chemical Identifier (InChIKey) encoding of the
  // reactant.
  optional string inchikey = 8;
  // Array of references to publications, database entries, etc. that
  // describe the reactant.
  repeated string references = 9;
}

message Reaction {
  // Unique identifier of the reaction.
  string id = 1;
  // Name of the reaction.
  string name = 2;
  // Whether the reaction is reversible or irreversible
  boolean reversible = 3;
  // Mathematical expression of the reaction.
  optional Equation kinetic_law = 4;
  // List of reaction elements that are part of the reaction.
  repeated ReactionElement species = 5;
  // List of reaction elements that are not part of the reaction but
  // influence it.
  repeated string modifiers = 6;
}

message ReactionElement {
  // Internal identifier to either a protein or reactant defined in the
  // EnzymeMLDocument.
  string species_id = 1;
  // Float number representing the associated stoichiometry.
  double stoichiometry = 2;
}

message Equation {
  // Internal identifier to a species defined in the EnzymeMLDocument,
  // given it is a rate equation.
  string species_id = 1;
  // Mathematical expression of the equation.
  string equation = 2;
  // Type of the equation.
  EquationType equation_type = 3;
  // List of variables that are part of the equation
  repeated Variable variables = 4;
}

message Variable {
  // Unique identifier of the variable.
  string id = 1;
  // Name of the variable.
  string name = 2;
  // Symbol of the variable.
  string symbol = 3;
}

message Parameter {
  // Unique identifier of the parameter.
  string id = 1;
  // Name of the parameter.
  string name = 2;
  // Symbol of the parameter.
  string symbol = 3;
  // Numerical value of the estimated parameter.
  optional double value = 4;
  // Unit of the estimated parameter.
  optional UnitDefinition unit = 5;
  // Initial value that was used for the parameter estimation.
  optional double initial_value = 6;
  // Upper bound of the estimated parameter.
  optional double upper_bound = 7;
  // Lower bound of the estimated parameter.
  optional double lower_bound = 8;
  // Standard error of the estimated parameter.
  optional double stderr = 9;
  // Specifies if this parameter is constant
  optional boolean constant = 10;
}

message Measurement {
  // Unique identifier of the measurement.
  string id = 1;
  // Name of the measurement
  string name = 2;
  // Measurement data of all species that were part of the measurement. A
  // species can refer to a protein, complex, or small molecule.
  repeated MeasurementData species_data = 3;
  // User-defined group ID to signal relationships between measurements.
  optional string group_id = 4;
  // PH value of the measurement.
  optional double ph = 5;
  // Temperature of the measurement.
  optional double temperature = 6;
  // Unit of the temperature of the measurement.
  optional UnitDefinition temperature_unit = 7;
}

message MeasurementData {
  // The identifier for the described reactant.
  string species_id = 1;
  // Initial amount of the measurement data. This must be the same as the
  // first data point in the array.
  double initial = 2;
  // SI unit of the data that was measured.
  UnitDefinition data_unit = 3;
  // Type of data that was measured (e.g. concentration)
  DataTypes data_type = 4;
  // Amount of the reactant before the measurement. This field should
  // be used for specifying the prepared amount of a species in
  // the reaction mix. Not to be confused with , specifying the
  // concentration at the first data point from the array.
  optional double prepared = 5;
  // Data that was measured.
  repeated double data = 6;
  // Time steps of the replicate.
  repeated double time = 7;
  // Time unit of the replicate.
  optional UnitDefinition time_unit = 8;
  // Whether or not the data has been generated by simulation.
  boolean is_simulated = 9;
}

message UnitDefinition {
  // Unique identifier of the unit definition.
  optional string id = 1;
  // Common name of the unit definition.
  optional string name = 2;
  // Base units that define the unit.
  repeated BaseUnit base_units = 3;
}

message BaseUnit {
  // Kind of the base unit (e.g., meter, kilogram, second).
  UnitType kind = 1;
  // Exponent of the base unit in the unit definition.
  integer exponent = 2;
  // Multiplier of the base unit in the unit definition.
  optional double multiplier = 3;
  // Scale of the base unit in the unit definition.
  optional double scale = 4;
}