# This file contains GraphQL type definitions.
#
# WARNING: This is an auto-generated file.
# Do not edit directly - any changes will be overwritten.


# Scalar wrapper types

# Union type definitions

# EnzymeML V2 Type definitions
type EnzymeMLDocument {
  name: String!
  created: String!
  modified: String!
  creators: [Creator]!
  vessels: [Vessel]!
  proteins: [Protein]
  complexes: [Complex]
  small_molecules: [SmallMolecule]
  reactions: [Reaction]
  measurements: [Measurement]
  equations: [Equation]
  parameters: [Parameter]
  references: [String]
}

type Creator {
  given_name: String!
  family_name: String!
  mail: String!
}

type Vessel {
  id: String!
  name: String!
  volume: Float!
  unit: UnitDefinition!
  constant: Boolean!
}

type Protein {
  id: String!
  name: String!
  constant: Boolean!
  sequence: String
  vessel_id: String
  ecnumber: String
  organism: String
  organism_tax_id: String
  references: [String]
}

type Complex {
  id: String!
  name: String!
  constant: Boolean!
  vessel_id: String
  participants: [String]
}

type SmallMolecule {
  id: String!
  name: String!
  constant: Boolean!
  vessel_id: String
  canonical_smiles: String
  inchi: String
  inchikey: String
  references: [String]
}

type Reaction {
  id: String!
  name: String!
  reversible: Boolean!
  kinetic_law: Equation
  reactants: [ReactionElement]
  products: [ReactionElement]
  modifiers: [String]
}

type ReactionElement {
  species_id: String!
  stoichiometry: Float!
}

type Equation {
  species_id: String!
  equation: String!
  equation_type: EquationType!
  variables: [Variable]
}

type Variable {
  id: String!
  name: String!
  symbol: String!
}

type Parameter {
  id: String!
  name: String!
  symbol: String!
  value: Float
  unit: UnitDefinition
  initial_value: Float
  upper_bound: Float
  lower_bound: Float
  stderr: Float
  constant: Boolean
}

type Measurement {
  id: String!
  name: String!
  species_data: [MeasurementData]
  group_id: String
  ph: Float
  temperature: Float
  temperature_unit: UnitDefinition
}

type MeasurementData {
  species_id: String!
  prepared: Float
  initial: Float
  data_unit: UnitDefinition
  data: [Float]
  time: [Float]
  time_unit: UnitDefinition
  data_type: DataTypes
  is_simulated: Boolean
}

type UnitDefinition {
  id: String
  name: String
  base_units: [BaseUnit]
}

type BaseUnit {
  kind: UnitType!
  exponent: Int!
  multiplier: Float
  scale: Float
}

# EnzymeML V2 Enum definitions
enum EquationType {
  ASSIGNMENT # assignment
  INITIAL_ASSIGNMENT # initialAssignment
  ODE # ode
  RATE_LAW # rateLaw
}

enum DataTypes {
  ABSORBANCE # absorbance
  CONCENTRATION # concentration
  CONVERSION # conversion
  FLUORESCENCE # fluorescence
  PEAK_AREA # peakarea
  TRANSMITTANCE # transmittance
}

enum UnitType {
  AMPERE # ampere
  AVOGADRO # avogadro
  BECQUEREL # becquerel
  CANDELA # candela
  CELSIUS # celsius
  COULOMB # coulomb
  DIMENSIONLESS # dimensionless
  FARAD # farad
  GRAM # gram
  GRAY # gray
  HENRY # henry
  HERTZ # hertz
  ITEM # item
  JOULE # joule
  KATAL # katal
  KELVIN # kelvin
  KILOGRAM # kilogram
  LITRE # litre
  LUMEN # lumen
  LUX # lux
  METRE # metre
  MOLE # mole
  NEWTON # newton
  OHM # ohm
  PASCAL # pascal
  RADIAN # radian
  SECOND # second
  SIEMENS # siemens
  SIEVERT # sievert
  STERADIAN # steradian
  TESLA # tesla
  VOLT # volt
  WATT # watt
  WEBER # weber
}


# Query type definitions
type Query {

  # EnzymeMLDocument queries
  allEnzymeMLDocuments: [EnzymeMLDocument]
  enzymemldocumentByName(name: String): [EnzymeMLDocument]
  enzymemldocumentByCreated(created: String): [EnzymeMLDocument]
  enzymemldocumentByModified(modified: String): [EnzymeMLDocument]

  # Creator queries
  allCreators: [Creator]
  creatorByGivenName(given_name: String): [Creator]
  creatorByFamilyName(family_name: String): [Creator]
  creatorByMail(mail: String): [Creator]

  # Vessel queries
  allVessels: [Vessel]
  vesselById(id: String): [Vessel]
  vesselByName(name: String): [Vessel]
  vesselByVolume(volume: Float): [Vessel]
  vesselByConstant(constant: Boolean): [Vessel]

  # Protein queries
  allProteins: [Protein]
  proteinById(id: String): [Protein]
  proteinByName(name: String): [Protein]
  proteinByConstant(constant: Boolean): [Protein]
  proteinBySequence(sequence: String): [Protein]
  proteinByVesselId(vessel_id: String): [Protein]
  proteinByEcnumber(ecnumber: String): [Protein]
  proteinByOrganism(organism: String): [Protein]
  proteinByOrganismTaxId(organism_tax_id: String): [Protein]

  # Complex queries
  allComplexs: [Complex]
  complexById(id: String): [Complex]
  complexByName(name: String): [Complex]
  complexByConstant(constant: Boolean): [Complex]
  complexByVesselId(vessel_id: String): [Complex]

  # SmallMolecule queries
  allSmallMolecules: [SmallMolecule]
  smallmoleculeById(id: String): [SmallMolecule]
  smallmoleculeByName(name: String): [SmallMolecule]
  smallmoleculeByConstant(constant: Boolean): [SmallMolecule]
  smallmoleculeByVesselId(vessel_id: String): [SmallMolecule]
  smallmoleculeByCanonicalSmiles(canonical_smiles: String): [SmallMolecule]
  smallmoleculeByInchi(inchi: String): [SmallMolecule]
  smallmoleculeByInchikey(inchikey: String): [SmallMolecule]

  # Reaction queries
  allReactions: [Reaction]
  reactionById(id: String): [Reaction]
  reactionByName(name: String): [Reaction]
  reactionByReversible(reversible: Boolean): [Reaction]

  # ReactionElement queries
  allReactionElements: [ReactionElement]
  reactionelementBySpeciesId(species_id: String): [ReactionElement]
  reactionelementByStoichiometry(stoichiometry: Float): [ReactionElement]

  # Equation queries
  allEquations: [Equation]
  equationBySpeciesId(species_id: String): [Equation]
  equationByEquation(equation: String): [Equation]
  equationByEquationType(equation_type: EquationType): [Equation]

  # Variable queries
  allVariables: [Variable]
  variableById(id: String): [Variable]
  variableByName(name: String): [Variable]
  variableBySymbol(symbol: String): [Variable]

  # Parameter queries
  allParameters: [Parameter]
  parameterById(id: String): [Parameter]
  parameterByName(name: String): [Parameter]
  parameterBySymbol(symbol: String): [Parameter]
  parameterByValue(value: Float): [Parameter]
  parameterByInitialValue(initial_value: Float): [Parameter]
  parameterByUpperBound(upper_bound: Float): [Parameter]
  parameterByLowerBound(lower_bound: Float): [Parameter]
  parameterByStderr(stderr: Float): [Parameter]
  parameterByConstant(constant: Boolean): [Parameter]

  # Measurement queries
  allMeasurements: [Measurement]
  measurementById(id: String): [Measurement]
  measurementByName(name: String): [Measurement]
  measurementByGroupId(group_id: String): [Measurement]
  measurementByPh(ph: Float): [Measurement]
  measurementByTemperature(temperature: Float): [Measurement]

  # MeasurementData queries
  allMeasurementDatas: [MeasurementData]
  measurementdataBySpeciesId(species_id: String): [MeasurementData]
  measurementdataByPrepared(prepared: Float): [MeasurementData]
  measurementdataByInitial(initial: Float): [MeasurementData]
  measurementdataByDataType(data_type: DataTypes): [MeasurementData]
  measurementdataByIsSimulated(is_simulated: Boolean): [MeasurementData]

  # UnitDefinition queries
  allUnitDefinitions: [UnitDefinition]
  unitdefinitionById(id: String): [UnitDefinition]
  unitdefinitionByName(name: String): [UnitDefinition]

  # BaseUnit queries
  allBaseUnits: [BaseUnit]
  baseunitByKind(kind: UnitType): [BaseUnit]
  baseunitByExponent(exponent: Int): [BaseUnit]
  baseunitByMultiplier(multiplier: Float): [BaseUnit]
  baseunitByScale(scale: Float): [BaseUnit]
}